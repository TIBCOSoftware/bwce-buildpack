#!/usr/bin/env bash
# Copyright (c) 2016, TIBCO Software Inc. All rights reserved.
# You may not use this file except in compliance with the license 
# terms contained in the TIBCO License.md file provided with this file.


extract ()
{
	if [ -f $1 ] ; then
  		case $1 in
   		*.tar.gz)  tar xvfz $1;;
    		*.gz)      gunzip $1;;
    		*.tar)     tar xvf $1;;
    		*.tgz)     tar xvzf $1;;
    		*.tar.bz2) tar xvjf $1;;
    		*.bz2)     bunzip2 $1;;
    		*.rar)     unrar x $1;;
    		*.tbz2)    tar xvjf $1;;
    		*.zip)     unzip -q $1;;
    		*.Z)       uncompress $1;;
    		*)         echo "can't extract from $1";;
  		esac
	else
		echo "no file called $1"
	fi
}

print_Debug()
{
	if [[ ${BW_LOGLEVEL} && "${BW_LOGLEVEL,,}"="debug" ]]; then
 		echo $1 
 	fi
}

checkProfile()
{
	defaultProfile=default.substvar
	manifest=$BUILD_DIR/META-INF/MANIFEST.MF
	bwAppConfig="TIBCO-BW-ConfigProfile"
	bwAppNameHeader="Bundle-SymbolicName"
	bwEdition='bwcf'
	#bwceTarget='TIBCO-BWCE-Edition-Target:'
	if [ -f ${manifest} ]; then
		bwAppProfileStr=`grep -o $bwAppConfig.*.substvar ${manifest}`
		bwBundleAppName=`while read line; do printf "%q\n" "$line"; done<${manifest} | awk '/.*:/{printf "%s%s", (NR==1)?"":RS,$0;next}{printf "%s", FS $0}END{print ""}' | grep -o $bwAppNameHeader.* | cut -d ":" -f2 | tr -d '[[:space:]]' | sed "s/\\\\\r'//g" | sed "s/$'//g"`		
    		if [ "$DISABLE_BWCE_EAR_VALIDATION" != true ]; then
        		bwEditionHeaderStr=`grep -E $bwEdition ${manifest}`
       			res=$?
	       		if [ ${res} -eq 0 ]; then
		  		print_Debug " "
	       		else
		  		echo "ERROR: Application [$bwBundleAppName] is not supported in TIBCO BusinessWorks Container Edition. Convert this application to TIBCO BusinessWorks Container Edition using TIBCO Business Studio Container Edition. Refer Conversion Guide for more details."
		  		exit 1
	       		fi
    		else
           		print_Debug "BWCE EAR Validation disabled."
    		fi

		# Check for BWCE unsupported palettes in manifest
		for name in $(find $BUILD_DIR -type f -iname "*.jar"); 
		do
			unzip -o -q $name
			MANIFESTMF=META-INF/MANIFEST.MF
			bwcePaletteStr=`tr -d '\n\r ' < ${MANIFESTMF} | grep -E 'bw.tcp|bw.rv'`
			res=$?
			if [ ${res} -eq 0 ]; then
 				echo "ERROR: Application [$bwBundleAppName] is using unsupported RV/TCP palette and can not be deployed in CloudFoundry. Rebuild your application for CloudFoundry using TIBCO Business Studio Container Edition."
 				exit 1
			fi
		done

		# Check for Policy in manifest
		for name in $(find $BUILD_DIR -type f -iname "*.jar"); 
		do
			unzip -o -q $name
			MANIFESTMF=META-INF/MANIFEST.MF
			bwcePolicyStr=`tr -d '\n\r ' < ${MANIFESTMF} | grep -E 'bw.authxml|bw.cred|bw.ldap|bw.wss|bw.dbauth|bw.kerberos|bw.realmdb|bw.ldaprealm|bw.userid'`
			policy_res=$?
			if [ ${policy_res} -eq 0 ]; then
				POLICY_ENABLED="true"
				break
			fi
		done

		# Check whether to overwrite management port or not
		for name in $(find $BUILD_DIR -type f -iname "*.jar");
		do
			unzip -o -q $name
			MANIFESTMF=META-INF/MANIFEST.MF
			bwceHttpSRStr=`tr -d '\n\r ' < ${MANIFESTMF} | grep -E 'bw.ftlrealmserverconnection|bw.httpconnector'`
			port_res=$?
			if [ ${port_res} -eq 0 ]; then
				OVERRIDE_MANAGEMENT_PORT="false"
                                break
			else
				OVERRIDE_MANAGEMENT_PORT="true"
			fi
		done
	fi

	arr=$(echo $bwAppProfileStr | tr "/" "\n")
	for x in $arr
	do
    		case "$x" in 
		*substvar)
		defaultProfile=$x;;esac	
	done

	if [ -z ${BW_PROFILE:=${defaultProfile}} ]; then 
		echo "BW_PROFILE is unset. Set it to $defaultProfile"; 
	else 
		case $BW_PROFILE in
 		*.substvar ) ;;
		* ) BW_PROFILE="${BW_PROFILE}.substvar";;esac		   
		print_Debug "BW_PROFILE is set to '$BW_PROFILE'";
	fi
}

checkThirdPartyInstallations()
{
	installFolder=$BUILD_PACK_DIR/resources/addons/thirdparty-installs
	if [ -d ${installFolder} ] && [ "$(ls $installFolder)"  ]; then
		mkdir -p tibco.home/thirdparty-installs
		for f in "$installFolder"/*; do
      		if [ -d $f ]
      		then
                cp -R "$f" tibco.home/thirdparty-installs
      		else
              	if [ "${f##*.}" == "zip" ]       
              	then
                    unzip -q "$f" -d tibco.home/thirdparty-installs/$(basename "$f" .zip);
                else
                   echo "Can not unzip $f. Not a valid ZIP file"    
              	fi
      		fi
		done;
	fi	
}

checkJarsPalettes()
{
	#check addon jars
	BW_VERSION=`ls $APPDIR/tibco.home/bw*/`
	jarFolder=$BUILD_PACK_DIR/resources/addons/jars
	if [ -d ${jarFolder} ] && [ "$(ls $jarFolder)"  ]; then 
		print_Debug "Adding additional jars"
		cp -r $BUILD_PACK_DIR/resources/addons/jars/* `echo tibco.home/bw*/*`/system/hotfix/shared
	fi
	pluginFolder=$BUILD_PACK_DIR/resources/addons/plugins
	if [ -d ${pluginFolder} ] && [ "$(ls $pluginFolder)"  ]; then 
		print_Debug "Adding Plug-in Jars"
		echo -e "name=Addons Factory\ntype=bw6\nlayout=bw6ext\nlocation=_APPDIR_/tibco.home/addons" > `echo tibco.home/bw*/*/ext/shared`/addons.link
		# unzip whatever is there not done
		for name in $(find $pluginFolder -type f); 
		do	
		# filter out hidden files
			if [[ "$(basename $name )" != .* ]];then
   				extract $name
				mkdir -p tibco.home/addons/runtime/plugins/ && mv runtime/plugins/* "$_"
				mkdir -p tibco.home/addons/lib/ && mv lib/* "$_"/${name##*/}.ini
			fi
		done
	fi
}

checkLibs()
{
	BW_VERSION=`ls $APPDIR/tibco.home/bw*/`
	libFolder=$BUILD_PACK_DIR/resources/addons/lib
	if [ -d ${libFolder} ] && [ "$(ls $libFolder)"  ]; then
		print_Debug "Adding additional libs"
		for name in $(find $libFolder -type f);
		do
			if [[ "$(basename $name)" = 'libsunec.so' ]]; then 
				print_Debug "libsunec.so File found..."		
				JRE_VERSION=`ls tibco.home/tibcojre64/`
				JRE_LOCATION=tibco.home/tibcojre64/$JRE_VERSION
				SUNEC_LOCATION=$JRE_LOCATION/lib/amd64
				cp -vf $name $SUNEC_LOCATION
			else
				# filter out hidden files
				if [[  "$(basename $name )" != .* ]]; then
					mkdir -p tibco.home/addons/lib/
   					unzip -q $name -d tibco.home/addons/lib/ 
   				fi
			fi
		done
	fi
}

checkAgents()
{
	agentFolder=$BUILD_PACK_DIR/resources/addons/monitor-agents

	if [ -d ${agentFolder} ] && [ "$(ls $agentFolder)"  ]; then 
		print_Debug "Adding monitoring jars"

		for name in $(find $agentFolder -type f); 
		do	
		# filter out hidden files
		if [[  "$(basename $name )" != .* ]];then
			mkdir -p agent/
   			unzip -q $name -d agent/
		fi
		done	
	fi
}

checkEnvSubstituteConfig()
{
	bwappnodeTRA=tibco.home/bw*/*/bin/bwappnode.tra
	bwappnodeFile=tibco.home/bw*/*/bin/bwappnode
	if [ -e ${bwappnodeTRA} ]; then
		sed -i 's?-Djava.class.path=?-Djava.class.path=$ADDONS_HOME/lib:?' $bwappnodeTRA
	fi
	if [ -e ${bwappnodeFile} ]; then
		sed -i 's?-Djava.class.path=?-Djava.class.path=$ADDONS_HOME/lib:?' $bwappnodeFile
	fi
	if [[ ${BW_JAVA_OPTS} ]]; then
		if [ -e ${bwappnodeTRA} ]; then
			 sed -i.bak "/java.extended.properties/s/$/ ${BW_JAVA_OPTS}/" $bwappnodeTRA
		fi
	fi

	if [[ ${BW_ENGINE_THREADCOUNT} ]]; then
		if [ -e ${appnodeConfigFile} ]; then
			printf '%s\n' "bw.engine.threadCount=$BW_ENGINE_THREADCOUNT" >> $appnodeConfigFile
			print_Debug "Set BW_ENGINE_THREADCOUNT to $BW_ENGINE_THREADCOUNT"
		fi
	fi
	if [[ ${BW_ENGINE_STEPCOUNT} ]]; then
		if [ -e ${appnodeConfigFile} ]; then
			printf '%s\n' "bw.engine.stepCount=$BW_ENGINE_STEPCOUNT" >> $appnodeConfigFile
			print_Debug "Set BW_ENGINE_STEPCOUNT to $BW_ENGINE_STEPCOUNT"
		fi
	fi
	if [[ ${BW_APPLICATION_JOB_FLOWLIMIT} ]]; then
		if [ -e ${appnodeConfigFile} ]; then
			printf '%s\n' "bw.application.job.flowlimit.$bwBundleAppName=$BW_APPLICATION_JOB_FLOWLIMIT" >> $appnodeConfigFile
			print_Debug "Set BW_APPLICATION_JOB_FLOWLIMIT to $BW_APPLICATION_JOB_FLOWLIMIT"
		fi
	fi
	if [[ ${BW_APP_MONITORING_CONFIG} ]]; then
		if [ -e ${appnodeConfigFile} ]; then
			sed -i 's/bw.frwk.event.subscriber.metrics.enabled=false/bw.frwk.event.subscriber.metrics.enabled=true/g' $appnodeConfigFile
			print_Debug "set bw.frwk.event.subscriber.metrics.enabled to true"
		fi
	else
		if [[ ${VCAP_SERVICES} && "${VCAP_SERVICES,,}" == *"\"name\":\""*"bwce-monitoring"* ]]; then
			if [ -e ${appnodeConfigFile} ]; then
				sed -i 's/bw.frwk.event.subscriber.metrics.enabled=false/bw.frwk.event.subscriber.metrics.enabled=true/g' $appnodeConfigFile
				print_Debug "set bw.frwk.event.subscriber.metrics.enabled to true"
			fi
		fi
	fi

	if [[  $BW_LOGLEVEL = "DEBUG" ]]; then
		if [[ ${BW_APPLICATION_JOB_FLOWLIMIT} ]] || [[ ${BW_ENGINE_STEPCOUNT} ]] || [[ ${BW_ENGINE_THREADCOUNT} ]] || [[ ${BW_APP_MONITORING_CONFIG} ]]; then
			echo "---------------------------------------"
			cat $appnodeConfigFile
			echo "---------------------------------------"
		fi
	fi
}

checkPolicy()
{
	if [[ $POLICY_ENABLED = "true" ]]; then
		if [ -e ${appnodeConfigFile} ]; then
			printf '%s\n' "bw.governance.enabled=true" >> $appnodeConfigFile
			print_Debug "Set bw.governance.enabled=true"
		fi
	fi
}

checkCerts()
{
	certsFolder=$BUILD_PACK_DIR/resources/addons/certs
	if [ -d ${certsFolder} ] && [ "$(ls $certsFolder)"  ]; then 
		JRE_VERSION=`ls tibco.home/tibcojre64/`
		jreLocation=tibco.home/tibcojre64/$JRE_VERSION
		certsStore=$jreLocation/lib/security/cacerts
		chmod +x $jreLocation/bin/keytool
		for name in $(find $certsFolder -type f); 
		do	
			# filter out hidden files
			if [[  "$(basename $name )" != .* && "$(basename $name )" != *.jks ]];then
				certsFile=$(basename $name )
 			 	print_Debug "Importing $certsFile into java truststore"

  				aliasName="${certsFile%.*}"				
				$jreLocation/bin/keytool -import -trustcacerts -keystore $certsStore -storepass changeit -noprompt -alias $aliasName -file $name
			fi
		done
	fi
}

addPCFCert()
{
	openssl_install=`echo $(which openssl)`
	if [[ ! -z ${openssl_install} ]]; then	
		cf_target=$CF_TARGET
		if [ ! -z ${cf_target} ]; then
			fname=$APPDIR/tmp/pcf_cert.pem
			openssl s_client -connect ${cf_target:8}:443 2>&1 </dev/null | sed -ne '/BEGIN CERT/,/END CERT/p' | openssl x509 -out $fname
			if [ -f $fname ]; then 
				JRE_VERSION=`ls tibco.home/tibcojre64/`
				jreLocation=tibco.home/tibcojre64/$JRE_VERSION
				certsStore=$jreLocation/lib/security/cacerts
				chmod +x $jreLocation/bin/keytool
				# filter out hidden files
			
				certsFile=$(basename $fname )
				print_Debug "Importing $certsFile into java truststore"

		  		aliasName="${certsFile%.*}"	
				$jreLocation/bin/keytool -import -trustcacerts -keystore $certsStore -storepass changeit -noprompt -alias $aliasName -file $fname
			fi
		fi
	else
		echo "openSSL is not installed"	
	fi	
}

overridePort()
{
	print_Debug "Checking to override management port. Variable for override value is: $OVERRIDE_MANAGEMENT_PORT"
	if [[ $OVERRIDE_MANAGEMENT_PORT = "true" ]]; then
		if [ -e ${appnodeConfigFile} ]; then
			sed -i 's/org.osgi.service.http.port=8090/org.osgi.service.http.port=8080/g' $appnodeConfigFile
			print_Debug "set org.osgi.service.http.port to 8080"
		fi
	fi
}

echo "Running BWCE buildpack"

BUILD_DIR=$1
CACHE_DIR=$2
BUILD_PACK_DIR=$(dirname $(dirname $0))
export APPDIR=$BUILD_DIR
POLICY_ENABLED="false"
OVERRIDE_MANAGEMENT_PORT="false"
checkProfile
print_Debug "args: $1 $2"
print_Debug "appdir is $APPDIR"
print_Debug "build pack dir is $BUILD_PACK_DIR"
print_Debug "build dir is $BUILD_DIR"
print_Debug "cache dir is $CACHE_DIR"
cd $BUILD_DIR
if [[ ${BW_LOGLEVEL} ]]; then
	ls -la
fi

profileFile=`ls | grep "substvar"`
if [ -s ${profileFile} -a  $profileFile ]; then
	BW_PROFILE=$profileFile
	echo "Overwriting BW_PROFILE to $profileFile"
	mv $BW_PROFILE /tmp/
else	
	if [ "$(ls META-INF | grep $BW_PROFILE)"  ]; then		
		cp META-INF/$BW_PROFILE /tmp/
	else
		echo "ERROR: $BW_PROFILE is not in the ear"
		exit 1
	fi
fi

if [[ ${BW_LOGLEVEL} && "${BW_LOGLEVEL,,}"="debug" ]]; then
	echo "BW_PROFILE is $BW_PROFILE"
	zip -r /tmp/bwapp.ear *
else
	zip -r -q /tmp/bwapp.ear *
fi

# move app into place
rm -fr *
mkdir $APPDIR/tmp
mv /tmp/$BW_PROFILE $APPDIR/tmp/pcf.substvar

# extract BW installation from cache folder
extract $BUILD_PACK_DIR/resources/cache/* > /dev/null
mv /tmp/bwapp.ear tibco.home/bw*/*/bin/

logback=tibco.home/bw*/*/config/logback.xml
appnodeConfigFile=tibco.home/bw*/*/config/appnode_config.ini

if [[ ${BW_LOGLEVEL} && "${BW_LOGLEVEL,,}"="debug" ]]; then
	if [ -e ${logback} ]; then
		sed -i.bak "/<root/ s/\".*\"/\"$BW_LOGLEVEL\"/Ig" $logback
		echo "The loglevel is set to $BW_LOGLEVEL level"
	fi
	else
		sed -i.bak "/<root/ s/\".*\"/\"ERROR\"/Ig" $logback
fi

cp $BUILD_PACK_DIR/resources/prestart.sh $BUILD_DIR
cp $BUILD_PACK_DIR/java-profile-token-resolver/ProfileTokenResolver.java $BUILD_DIR
mkdir -p $BUILD_DIR/keystore && cp -r $BUILD_PACK_DIR/resources/addons/certs/. $BUILD_DIR/keystore

chmod 755 $BUILD_DIR/prestart.sh
checkEnvSubstituteConfig
checkJarsPalettes
checkLibs
checkAgents
checkCerts
overridePort
checkPolicy
addPCFCert
checkThirdPartyInstallations
# eof
